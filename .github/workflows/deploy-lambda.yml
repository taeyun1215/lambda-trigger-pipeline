name: Deploy Lambda Function

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ap-northeast-2'
        run: |
          aws s3 cp build/libs/demo-0.0.1-SNAPSHOT.jar s3://spring-aws-lambda/demo-0.0.1-SNAPSHOT.jar

      - name: Check if Lambda Exists
        id: check_lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ap-northeast-2'
        run: |
          aws lambda get-function --function-name user || echo "Function does not exist"

      - name: Create or Update Lambda Function
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ap-northeast-2'
        run: |
          if aws lambda get-function --function-name user; then
            aws lambda update-function-code --function-name user --s3-bucket spring-aws-lambda --s3-key demo-0.0.1-SNAPSHOT.jar;
          else
            aws lambda create-function --function-name user --runtime java17 --role arn:aws:iam::905418281075:role/taeyun --handler com.example.demo.handler.StreamLambdaHandler::handleRequest --code S3Bucket=spring-aws-lambda,S3Key=demo-0.0.1-SNAPSHOT.jar --description "My Java Lambda function" --timeout 15 --memory-size 512;
          fi

      - name: Start Spring Boot and Generate OpenAPI Spec
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DRIVER: ${{ secrets.DB_DRIVER }}
        run: |
          nohup ./gradlew bootRun &
          sleep 30
          curl -o openapi.json http://localhost:8080/v3/api-docs

      - name: Upload OpenAPI Spec to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ap-northeast-2'
        run: |
          aws s3 cp openapi.json s3://spring-aws-lambda/openapi.json

      - name: Encode OpenAPI Spec
        run: |
          base64 openapi.json > openapi_base64.json

      - name: Create or Update API Gateway and Integrate with Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ap-northeast-2'
        run: |
          # 변수 설정
          REGION="ap-northeast-2"
          LAMBDA_FUNCTION_NAME="user"
          API_NAME="user-gateway"
          STAGE_NAME="prod"
          OPENAPI_FILE="openapi_base64.json"

          # API Gateway ID 가져오기
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='${API_NAME}'].id" --output text --region ${REGION})

          echo "API_ID: ${API_ID}"

          if [ -z "$API_ID" ] || [ "$API_ID" == "None" ]; then
            echo "Creating new API Gateway..."
            # API Gateway 생성
            API_BODY=$(cat ${OPENAPI_FILE})
            API_ID=$(aws apigateway import-rest-api --body "$API_BODY" --query 'id' --output text --region ${REGION})
            aws apigateway update-rest-api --rest-api-id $API_ID --patch-operations op=replace,path=/name,value="${API_NAME}" --region ${REGION}
          else
            echo "Updating existing API Gateway..."
            # API Gateway 업데이트
            API_BODY=$(cat ${OPENAPI_FILE})
            aws apigateway put-rest-api --rest-api-id $API_ID --mode overwrite --body "$API_BODY" --region ${REGION}
          fi

          echo "Updated API_ID: ${API_ID}"

          # API Gateway 경로 및 메서드 가져오기
          RESOURCE_IDS=$(aws apigateway get-resources --rest-api-id $API_ID --query "items[].id" --output text --region ${REGION})
          echo "RESOURCE_IDS: ${RESOURCE_IDS}"

          for RESOURCE_ID in $RESOURCE_IDS; do
            echo "Processing RESOURCE_ID: ${RESOURCE_ID}"
            RESOURCE=$(aws apigateway get-resource --rest-api-id $API_ID --resource-id $RESOURCE_ID --region ${REGION})
            if [ "$(echo $RESOURCE | jq '.resourceMethods')" != "null" ]; then
              METHODS=$(echo $RESOURCE | jq -r '.resourceMethods | keys | @tsv')
              echo "METHODS raw output: ${METHODS}
              if [ -z "$METHODS" ] || [ "$METHODS" == "None" ] || [ "$METHODS" == "null" ]; then
                echo "No methods found for RESOURCE_ID: ${RESOURCE_ID}"
                continue
              fi
              echo "METHODS for RESOURCE_ID ${RESOURCE_ID}: ${METHODS}"
              for METHOD in $METHODS; do
                echo "Adding integration for METHOD: ${METHOD} on RESOURCE_ID: ${RESOURCE_ID}"
                # Lambda 통합 추가
                aws apigateway put-integration --rest-api-id $API_ID --resource-id $RESOURCE_ID --http-method $METHOD \
                  --type AWS_PROXY --integration-http-method POST \
                  --uri arn:aws:apigateway:${REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${REGION}:$(aws sts get-caller-identity --query "Account" --output text):function:${LAMBDA_FUNCTION_NAME}/invocations \
                  --region ${REGION}
              done
            else
              echo "No methods found for RESOURCE_ID: ${RESOURCE_ID}"
            fi
          done

          # 배포
          aws apigateway create-deployment --rest-api-id $API_ID --stage-name $STAGE_NAME --region ${REGION}
