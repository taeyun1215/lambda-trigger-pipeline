name: Deploy Lambda Function

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ap-northeast-2'
        run: |
          aws s3 cp build/libs/demo-0.0.1-SNAPSHOT.jar s3://spring-aws-lambda/demo-0.0.1-SNAPSHOT.jar

      - name: Check if Lambda Exists
        id: check_lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ap-northeast-2'
        run: |
          aws lambda get-function --function-name user || echo "Function does not exist"

      - name: Create or Update Lambda Function
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ap-northeast-2'
        run: |
          if aws lambda get-function --function-name user; then
            aws lambda update-function-code --function-name user --s3-bucket spring-aws-lambda --s3-key demo-0.0.1-SNAPSHOT.jar;
          else
            aws lambda create-function --function-name user --runtime java17 --role arn:aws:iam::905418281075:role/taeyun --handler com.example.demo.handler.StreamLambdaHandler::handleRequest --code S3Bucket=spring-aws-lambda,S3Key=demo-0.0.1-SNAPSHOT.jar --description "My Java Lambda function" --timeout 15 --memory-size 512;
          fi

      - name: Start Spring Boot and Generate OpenAPI Spec
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DRIVER: ${{ secrets.DB_DRIVER }}
        run: |
          nohup ./gradlew bootRun &
          sleep 30
          curl -o openapi.json http://localhost:8080/v3/api-docs

      - name: Upload OpenAPI Spec to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ap-northeast-2'
        run: |
          aws s3 cp openapi.json s3://spring-aws-lambda/openapi.json

      - name: Create or Update API Gateway
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ap-northeast-2'
        run: |
          API_ID=$(aws apigateway import-rest-api --body 'file://openapi.json' --parameters endpointConfigurationTypes=REGIONAL --region ap-northeast-2 --query 'id' --output text)
          aws apigateway create-deployment --rest-api-id $API_ID --stage-name prod